{"version":3,"sources":["components/Loading.js","components/Result.js","components/Questions.js","components/useFetch.js","Quiz.js","reportWebVitals.js","index.js"],"names":["Loading","className","Result","correct","questions","console","log","length","decode","str","replace","Questions","reset","startQuiz","useState","showResult","setShowresult","React","setCorrect","index","setIndex","answersList","map","el","incorrect_answers","correct_answer","sort","Math","random","aria-label","type","onClick","Fragment","question","answer","j","response","some","p","i","handleCorrectAnswer","Date","getTime","useFetch","url","data","setData","isLoading","setIsloading","useEffect","a","fetch","json","message","getData","difficultyArray","Quiz","category","setCategory","difficulty","setDifficulty","setQuestions","chooseCategory","e","target","value","chooseDifficulty","then","res","results","trivia_categories","id","name","style","marginTop","item","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1972f18.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Loading = () => <div className='loader'></div>\r\n\r\nexport default Loading\r\n","import React from 'react'\r\n\r\nconst Result = ({ correct, questions }) => {\r\n    console.log(correct)\r\n    return <article>\r\n     <h1 className='section-title'>Result</h1>\r\n        <div className='results'>        \r\n            <h4 className='section-title'>\r\n                You have {correct} / {questions.length} correct answers\r\n            </h4>\r\n        </div>\r\n    </article>\r\n\r\n\r\n}\r\n\r\nexport default Result","import React, { useState } from 'react'\r\nimport Result from './Result'\r\n\r\n\r\n//  Decode HTML Characters\r\nconst decode = (str) => {\r\n    let doubleQuote = /&quot;/g\r\n    let singleQuote = /&#039;/g\r\n    return str.replace(doubleQuote, \"\\\"\").replace(singleQuote, \"'\")\r\n}\r\n\r\nconst Questions = ({ questions, reset, startQuiz }) => {\r\n    const [showResult, setShowresult] = useState(false)\r\n    const [correct, setCorrect] = React.useState(0)\r\n    const [index, setIndex] = useState(0)\r\n\r\n    // console.log(questions.map((el, i) => `answer ${i} ${el.correct_answer}`))\r\n    //---Shuffle Answers\r\n    const answersList = questions.map(el => [...el.incorrect_answers, el.correct_answer].sort(() => Math.random() - 0.5))\r\n\r\n    const handleCorrectAnswer = (answer) => {\r\n        const response = questions.some(p => p.correct_answer === answer)\r\n        if (index < questions.length - 1) {\r\n            setIndex(i => i + 1)\r\n            if (response) {\r\n                setCorrect(correct => correct + 1)\r\n            }\r\n        } else {\r\n            setCorrect(correct => correct + 1)\r\n            setShowresult(true)\r\n        }\r\n    }\r\n\r\n    return <>\r\n        {!showResult ? (\r\n            <React.Fragment>\r\n                <div className='wrapper'>\r\n                    <div className='row' aria-label=\"category\">\r\n                        <h3 aria-label=\"question number\">Question {index + 1}</h3>\r\n                    </div>\r\n                    <div className='row' aria-label=\"question\">\r\n                        <p>{decode(questions[index].question)}</p>\r\n                    </div>\r\n                </div>\r\n                <div className='wrapper'>\r\n                    <div className='row' aria-label=\"answer section\">\r\n                        <ul className='list'>\r\n                            {answersList[index].map((answer, j) => <li key={j * new Date().getTime()}>\r\n                                <button className='btn-white' onClick={() => handleCorrectAnswer(answer)}>\r\n                                    {decode(answer)}\r\n                                </button>\r\n                            </li>)}\r\n\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        ) : (\r\n            <div aria-label=\"result\">\r\n                <Result correct={correct} questions={questions} />\r\n                <div className='btn-wrapper'>\r\n                    <button type='click' onClick={reset} className='btn submit'>play again</button>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n        }\r\n    </>\r\n}\r\n\r\nexport default Questions\r\n\r\n\r\n\r\n\r\n","import { useEffect, useState } from 'react'\r\n\r\nconst useFetch = (url) => {\r\n    const [data, setData] = useState([])\r\n    const [isLoading, setIsloading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            try {\r\n                setIsloading(false)\r\n                const response = await fetch(url)\r\n                const json = await response.json()\r\n                setData(json);\r\n            } catch (err) {\r\n                setIsloading(false)\r\n                console.log(err.message)\r\n            }\r\n\r\n        }\r\n        getData()\r\n    }, [url])\r\n\r\n    return { data, isLoading }\r\n}\r\n\r\nexport default useFetch","// import logo from './logo.svg';\nimport React from 'react'\nimport Loading from './components/Loading'\nimport Questions from './components/Questions'\nimport useFetch from './components/useFetch'\nimport './App.css'\n\n// ---External API ---\nconst URL = 'https://opentdb.com/api_category.php'\n// ----  Array Of Difficulties\nconst difficultyArray = [\"easy\", \"medium\", \"hard\"]\n\nconst Quiz = () => {\n  const { data, isLoading } = useFetch(URL)\n  const [category, setCategory] = React.useState('')\n  const [difficulty, setDifficulty] = React.useState('')\n  const [questions, setQuestions] = React.useState([])\n\n  //---- Set Category and Difficulty Values\n  const chooseCategory = (e) => {\n    setCategory(e.target.value)\n  }\n  const chooseDifficulty = (e) => {\n    setDifficulty(e.target.value)\n  }\n  //--- Start Quiz\n  const startQuiz = async () => {\n    try {\n      await fetch(`https://opentdb.com/api.php?amount=10&category=${category}&difficulty=${difficulty}`)\n        .then(res => res.json())\n        .then(data => setQuestions(data.results))\n    } catch (err) {\n      console.log(err.message)\n    }\n  }\n\n  const reset = () => {\n    setQuestions([])\n  }\n\n  // --- Render Options ----\n  if (questions.length < 1) {\n    return <main>\n      {isLoading ? <Loading /> : (\n        <React.Fragment>\n          <div>\n            <h1 className='section-title'>Quiz</h1>\n            {data.trivia_categories && data.trivia_categories.map(category => <button className='btn-white'\n              key={category.id}\n              onClick={chooseCategory}\n              value={category.id} >\n              {category.name}\n            </button>\n            )}\n          </div>\n\n          <div>\n            <h2 style={{ marginTop: '3rem' }}>Choose Dificulty: </h2>\n            {difficultyArray.map((item, i) => (\n              <button className='btn-white' key={i} onClick={chooseDifficulty} value={item}>{item}</button>\n            ))}\n            <div className='btn-wrapper'>\n              <button type='click' onClick={startQuiz} className='btn submit'>start</button>\n            </div>\n          </div>\n        </React.Fragment>\n      )}\n    </main>\n  }\n\n  return <main>\n    <Questions questions={questions} reset={reset} />\n  </main>\n\n}\n\nexport default Quiz;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Quiz from './Quiz';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Quiz />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}